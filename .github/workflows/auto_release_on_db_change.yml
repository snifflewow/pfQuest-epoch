name: Release pfQuest-epoch on changes
on:
  push:
    branches: [ main ]
    paths:
      - 'pfQuest-epoch/**'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip pfQuest-epoch folder
        run: zip -r pfQuest-epoch.zip pfQuest-epoch

      - name: Create Versioned Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pfQuest-epoch-${{ github.run_number }}
          name: Release pfQuest-epoch-${{ github.run_number }}
          files: pfQuest-epoch.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload pfQuest-epoch.zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pfQuest-epoch.zip
          path: pfQuest-epoch.zip

  latest:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download pfQuest-epoch.zip artifact
        uses: actions/download-artifact@v4
        with:
          name: pfQuest-epoch.zip

      - name: Delete existing 'latest' release (if it exists)
        run: |
          LATEST_RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/latest" | jq -r '.id')
          if [ "$LATEST_RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$LATEST_RELEASE_ID" || true
          fi

      - name: Create 'latest' Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release (pfQuest-epoch)
          files: pfQuest-epoch.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
